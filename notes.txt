Objects
-Organizing code into appropriate objects
  -this is useful for sharing states and behaviors between objects
  -object oriented programming allows us to utilize the power of inheritance, encapsulation, and polymorphism
-Object factories
  -provides a way to create objects from a pre-defined template
  -disadvantages:
    -cannot tell whether an object was made from a specific function, so it's difficult to determine whether the object is of a specific 'type'
    -every object made from the factory has all methods, which may be redundant


Determining/setting function execution context (this)
  -Depends on where the function is invoked
-Implicit function execution context
-Explicit function execution context
  -calling a function with call or apply
-Dealing with context loss
  1)method losing context when taken out of object:
    -pass in the context as an additional parameter
    -hard bind the function call to a specific object using bind
  2)internal function losing method context:
    -preserve context with a local variable in the lexical scope (var self = this)
    -pass the context to internal functions
    -bind the context with a function expression
  3)function as argument losing surrounding context:
    -use a local variable in the lexical scope to store this
    -bind the function argument with the surrounding context
    -use the optional thisArg argument



Scope and Closures

When a new function is created, it retains access to all of the references visible to it in the lexical location of its creation.

  -Closures are created when a function is declared, and allow the function to retain access to all of the variables visible to it inside of the scope where it was declared
-Creating and using private data
  -variables inside closures are available to the closure, never outside it
  -using closures to restrict data access is a good way to force other developers to use the intended interface. By keeping the collection of items private, we enforce access via the provided methods
  -these benefits have a cost. For instance, making data private can make it harder to extend the code
-IIFEs
  -an IIFE can be used to create a temporary, private scope
-Partial Function Application
  -the original function already has some of its arguments defined
  -example:
    function later(func, argument) {
      return function() {
        func(argument);
      };
    }
  -Function.prototype.bind can also be used for partial function application so that a "generator" (LS term) isn't needed

Garbage collection
  -JavaScript is a garbage-collected language. This means that the JS runtime, rather than the developer, handles memory deallocation. Values that are no longer accessible from anywhere in the code are eligible for garbage collection, which frees up the memory that they used for reuse by other parts of the program.

Object creation patterns
-Constructor functions
  -these are like classes
  -they are functions that conventionally start with an uppercase letter
  -a constructor function is meant to be called with the new keyword
-Prototype objects
  -Object.getPrototypeOf and object.isPrototypeOf
  -Object.create()
-Behavior delegation
  -Object.getOwnPropertyNames and object.hasOwnProperty
-OLOO and Pseudo-Classical patterns
  -

Prototypal Inheritance/Behavior Delegation

Some people call this pattern JavaScript's Prototypal Inheritance. The word "inheritance" comes from the classical object oriented programming languages (Java, C++, Ruby, Python, etc.) where classes are used to create objects with a carefully designed hierarchy for the purpose of behavior sharing. JavaScript doesn't have true classes, but in a true object oriented (as opposed to "class oriented") way, objects can be created directly from other objects and behaviors (methods) can be shared via the prototype chain.

From a top down / design time point of view, the objects on the bottom of the prototype chain "inherited" the properties and behaviors of all the upstream objects on the prototype chain; from a bottom up / run time point of view, objects on the bottom of the prototype chain can "delegate" requests to the upstream objects to be handled. Hence this design pattern is also called Behavior Delegation.

It is important to remember that there is a difference between Function Prototypes and Object Prototypes.

The prototype of an object is the function prototype of the constructor function used to create it.

Creature.prototype.constructor === Creature

(method 1 sets the prototype of the Dog constructor to reference the object returned by the Animal constructor. This object has the type property.

method 2 sets the prototype of the Dog constructor to reference the object returned by Object.create(Animal.prototype). This object does not have the type property.)

Question 11:
Instead of saying we store an invoked version of the function, I should say we store the return value of the function, which is itself a function. JS allows for higher-order functions, which can receive a function as an argument or return a function or both.

Question 13:
You were close, but this is the correct answer:

var foo = (function() {
  var counter = 0;

  return {
    increment: function() {
      counter += 1;
      return counter;
    },
    display: function() {
      console.log('The total count is: ' + String(counter));
    },
  }
})();

Question 15:
I believe the issue here is similar to that found in question 11. Basically I need to explain how partial function application is made possible by using of higher order functions (actually I think the concept of closure is really what needs to be highlighted here).

Two disadvantages to working with object factories:
-Every object instantiated from the factory will have all properties from the constructor, which may be redundant.
-There's no way to tell if objects created from the factory were instantiated from it.
